# SPDX-License-Identifier: MIT

# Bash completion for pixel_terrain

_pixel_terrain() {
    local global_options=(--help --version)
    local subcommands=(dump-nbt image nbt-to-xml server world-info)

    local cur="${COMP_WORDS[$COMP_CWORD]}"
    local prev="${COMP_WORDS[$COMP_CWORD-1]}"

    # In case '--foo=' form.
    if [ "x$prev" = 'x=' ] && [ 0 -lt "$((COMP_CWORD-1))" ]; then
        prev="${COMP_WORDS[$COMP_CWORD-2]}"
    fi

    if [ "$COMP_CWORD" -eq 1 ]; then
        COMPREPLY=($(compgen -W "${subcommands[*]} ${global_options[*]}" -- "$cur"))
        return
    fi

    local first_option="${COMP_WORDS[1]}"

    case "$first_option" in
        dump-nbt)
            local dump_nbt_options=(-o --out -s --where)
            case "$prev" in
                -o|--out)
                    COMPREPLY=($(compgen -A directory -- "$cur"))
                    return
                    ;;
                -s|--where)
                    COMPREPLY=($(compgen -W "$(echo '('{0..31}','{0..31}')')" -- "$cur"))
                    return
                    ;;
                *)
                    COMPREPLY=($(compgen -A file -W "${dump_nbt_options[*]} ${global_options[*]}" -- "$cur"))
                    return
                    ;;
            esac
            ;;

        image)
            local image_options=(-j --jobs -c --cache-dir -n --nether -o --out -r --gen-range -V)
            case "$prev" in
                -j|--jobs)
                    COMPREPLY=($(compgen -W "$(seq $(nproc))" -- "$cur"))
                    return
                    ;;
                -c|--cache-dir|-o|--out)
                    COMPREPLY=($(compgen -A directory -- "$cur"))
                    return
                    ;;
                *)
                    COMPREPLY=($(compgen -W directory -W "${image_options[*]} ${global_options[*]}" -- "$cur"))
                    return
                    ;;
            esac
            ;;

        nbt-to-xml)
            local nbt_to_xml_options=(-s --indent -u --no-prettify)
            case "$prev" in
                -s|--indent)
                    COMPREPLY=()
                    return
                    ;;
                *)
                    COMPREPLY=($(compgen -A file -W "${nbt_to_xml_options[*]} ${global_options[*]}" -- "$cur"))
                    return
                    ;;
            esac
            ;;

        server)
            local server_options=(-d --daemon -o --overworld -n --nether -e --end)
            case "$prev" in
                -o|--overworld|-n|--nether|-e|--end)
                    COMPREPLY=($(compgen -A directory -- "$cur"))
                    return
                    ;;
                *)
                    COMPREPLY=($(compgen -W "${server_options[*]} ${global_options[*]}" -- "$cur"))
                    return
                    ;;
            esac
            ;;

        world-info)
            local world_info_options=(-F --fields -q --quiet)
            local fields=(name path)
            case "$prev" in
                -F|--fields)
                    if [ -z "${cur#=}" ]; then
                        COMPREPLY=(${fields[@]})
                    else
                        local last="$(tail -1 <<<"${cur//,/$'\n'}")"
                        local candidates=($(compgen -W "${fields[*]}" -- "$last"))
                        local last_dropped="${cur%$last}"
                        COMPREPLY=($(printf "%s\n" "${candidates[@]}" | sed "s@^@${last_dropped//@/\\@}@g"))
                        if [ ! -z "$last" ]; then
                            COMPREPLY=($(sed 's/^.*$/& &,/g' <<<"${COMPREPLY[@]}"))
                        fi
                    fi
                    return
                    ;;
                *)
                    COMPREPLY=($(compgen -W "${world_info_options[*]}" -- "$cur"))
                    return
                    ;;
            esac
            ;;

        *)
            COMPREPLY=($(compgen -W "${global_options[*]}" -- "$cur"))
            return
            ;;
    esac
} && complete -F _pixel_terrain pixel-terrain

# Local Variables:
#   mode: shell-script
# End:
